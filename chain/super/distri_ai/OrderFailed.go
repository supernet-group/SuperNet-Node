// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package distri_ai

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// OrderFailed is the `orderFailed` instruction.
type OrderFailed struct {
	Metadata *string

	// [0] = [WRITE] machine
	//
	// [1] = [WRITE] order
	//
	// [2] = [WRITE, SIGNER] seller
	//
	// [3] = [WRITE] buyerAta
	//
	// [4] = [WRITE] vault
	//
	// [5] = [] mint
	//
	// [6] = [] tokenProgram
	//
	// [7] = [] associatedTokenProgram
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewOrderFailedInstructionBuilder creates a new `OrderFailed` instruction builder.
func NewOrderFailedInstructionBuilder() *OrderFailed {
	nd := &OrderFailed{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 8),
	}
	return nd
}

// SetMetadata sets the "metadata" parameter.
func (inst *OrderFailed) SetMetadata(metadata string) *OrderFailed {
	inst.Metadata = &metadata
	return inst
}

// SetMachineAccount sets the "machine" account.
func (inst *OrderFailed) SetMachineAccount(machine ag_solanago.PublicKey) *OrderFailed {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(machine).WRITE()
	return inst
}

// GetMachineAccount gets the "machine" account.
func (inst *OrderFailed) GetMachineAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetOrderAccount sets the "order" account.
func (inst *OrderFailed) SetOrderAccount(order ag_solanago.PublicKey) *OrderFailed {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(order).WRITE()
	return inst
}

// GetOrderAccount gets the "order" account.
func (inst *OrderFailed) GetOrderAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetSellerAccount sets the "seller" account.
func (inst *OrderFailed) SetSellerAccount(seller ag_solanago.PublicKey) *OrderFailed {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(seller).WRITE().SIGNER()
	return inst
}

// GetSellerAccount gets the "seller" account.
func (inst *OrderFailed) GetSellerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetBuyerAtaAccount sets the "buyerAta" account.
func (inst *OrderFailed) SetBuyerAtaAccount(buyerAta ag_solanago.PublicKey) *OrderFailed {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(buyerAta).WRITE()
	return inst
}

// GetBuyerAtaAccount gets the "buyerAta" account.
func (inst *OrderFailed) GetBuyerAtaAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetVaultAccount sets the "vault" account.
func (inst *OrderFailed) SetVaultAccount(vault ag_solanago.PublicKey) *OrderFailed {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(vault).WRITE()
	return inst
}

// GetVaultAccount gets the "vault" account.
func (inst *OrderFailed) GetVaultAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetMintAccount sets the "mint" account.
func (inst *OrderFailed) SetMintAccount(mint ag_solanago.PublicKey) *OrderFailed {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(mint)
	return inst
}

// GetMintAccount gets the "mint" account.
func (inst *OrderFailed) GetMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetTokenProgramAccount sets the "tokenProgram" account.
func (inst *OrderFailed) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *OrderFailed {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "tokenProgram" account.
func (inst *OrderFailed) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetAssociatedTokenProgramAccount sets the "associatedTokenProgram" account.
func (inst *OrderFailed) SetAssociatedTokenProgramAccount(associatedTokenProgram ag_solanago.PublicKey) *OrderFailed {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(associatedTokenProgram)
	return inst
}

// GetAssociatedTokenProgramAccount gets the "associatedTokenProgram" account.
func (inst *OrderFailed) GetAssociatedTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

func (inst OrderFailed) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_OrderFailed,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst OrderFailed) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *OrderFailed) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Metadata == nil {
			return errors.New("Metadata parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Machine is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Order is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.Seller is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.BuyerAta is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.Vault is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.Mint is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.AssociatedTokenProgram is not set")
		}
	}
	return nil
}

func (inst *OrderFailed) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("OrderFailed")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("Metadata", *inst.Metadata))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=8]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("               machine", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("                 order", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("                seller", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("              buyerAta", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("                 vault", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("                  mint", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("          tokenProgram", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("associatedTokenProgram", inst.AccountMetaSlice.Get(7)))
					})
				})
		})
}

func (obj OrderFailed) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Metadata` param:
	err = encoder.Encode(obj.Metadata)
	if err != nil {
		return err
	}
	return nil
}
func (obj *OrderFailed) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Metadata`:
	err = decoder.Decode(&obj.Metadata)
	if err != nil {
		return err
	}
	return nil
}

// NewOrderFailedInstruction declares a new OrderFailed instruction with the provided parameters and accounts.
func NewOrderFailedInstruction(
	// Parameters:
	metadata string,
	// Accounts:
	machine ag_solanago.PublicKey,
	order ag_solanago.PublicKey,
	seller ag_solanago.PublicKey,
	buyerAta ag_solanago.PublicKey,
	vault ag_solanago.PublicKey,
	mint ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey,
	associatedTokenProgram ag_solanago.PublicKey) *OrderFailed {
	return NewOrderFailedInstructionBuilder().
		SetMetadata(metadata).
		SetMachineAccount(machine).
		SetOrderAccount(order).
		SetSellerAccount(seller).
		SetBuyerAtaAccount(buyerAta).
		SetVaultAccount(vault).
		SetMintAccount(mint).
		SetTokenProgramAccount(tokenProgram).
		SetAssociatedTokenProgramAccount(associatedTokenProgram)
}
