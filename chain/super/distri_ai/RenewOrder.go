// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package distri_ai

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// RenewOrder is the `renewOrder` instruction.
type RenewOrder struct {
	Duration *uint32

	// [0] = [WRITE] machine
	//
	// [1] = [WRITE] order
	//
	// [2] = [WRITE, SIGNER] buyer
	//
	// [3] = [WRITE] buyerAta
	//
	// [4] = [WRITE] vault
	//
	// [5] = [] mint
	//
	// [6] = [] tokenProgram
	//
	// [7] = [] associatedTokenProgram
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewRenewOrderInstructionBuilder creates a new `RenewOrder` instruction builder.
func NewRenewOrderInstructionBuilder() *RenewOrder {
	nd := &RenewOrder{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 8),
	}
	return nd
}

// SetDuration sets the "duration" parameter.
func (inst *RenewOrder) SetDuration(duration uint32) *RenewOrder {
	inst.Duration = &duration
	return inst
}

// SetMachineAccount sets the "machine" account.
func (inst *RenewOrder) SetMachineAccount(machine ag_solanago.PublicKey) *RenewOrder {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(machine).WRITE()
	return inst
}

// GetMachineAccount gets the "machine" account.
func (inst *RenewOrder) GetMachineAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetOrderAccount sets the "order" account.
func (inst *RenewOrder) SetOrderAccount(order ag_solanago.PublicKey) *RenewOrder {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(order).WRITE()
	return inst
}

// GetOrderAccount gets the "order" account.
func (inst *RenewOrder) GetOrderAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetBuyerAccount sets the "buyer" account.
func (inst *RenewOrder) SetBuyerAccount(buyer ag_solanago.PublicKey) *RenewOrder {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(buyer).WRITE().SIGNER()
	return inst
}

// GetBuyerAccount gets the "buyer" account.
func (inst *RenewOrder) GetBuyerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetBuyerAtaAccount sets the "buyerAta" account.
func (inst *RenewOrder) SetBuyerAtaAccount(buyerAta ag_solanago.PublicKey) *RenewOrder {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(buyerAta).WRITE()
	return inst
}

// GetBuyerAtaAccount gets the "buyerAta" account.
func (inst *RenewOrder) GetBuyerAtaAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetVaultAccount sets the "vault" account.
func (inst *RenewOrder) SetVaultAccount(vault ag_solanago.PublicKey) *RenewOrder {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(vault).WRITE()
	return inst
}

// GetVaultAccount gets the "vault" account.
func (inst *RenewOrder) GetVaultAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetMintAccount sets the "mint" account.
func (inst *RenewOrder) SetMintAccount(mint ag_solanago.PublicKey) *RenewOrder {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(mint)
	return inst
}

// GetMintAccount gets the "mint" account.
func (inst *RenewOrder) GetMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetTokenProgramAccount sets the "tokenProgram" account.
func (inst *RenewOrder) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *RenewOrder {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "tokenProgram" account.
func (inst *RenewOrder) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetAssociatedTokenProgramAccount sets the "associatedTokenProgram" account.
func (inst *RenewOrder) SetAssociatedTokenProgramAccount(associatedTokenProgram ag_solanago.PublicKey) *RenewOrder {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(associatedTokenProgram)
	return inst
}

// GetAssociatedTokenProgramAccount gets the "associatedTokenProgram" account.
func (inst *RenewOrder) GetAssociatedTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

func (inst RenewOrder) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_RenewOrder,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst RenewOrder) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *RenewOrder) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Duration == nil {
			return errors.New("Duration parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Machine is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Order is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.Buyer is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.BuyerAta is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.Vault is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.Mint is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.AssociatedTokenProgram is not set")
		}
	}
	return nil
}

func (inst *RenewOrder) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("RenewOrder")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("Duration", *inst.Duration))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=8]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("               machine", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("                 order", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("                 buyer", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("              buyerAta", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("                 vault", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("                  mint", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("          tokenProgram", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("associatedTokenProgram", inst.AccountMetaSlice.Get(7)))
					})
				})
		})
}

func (obj RenewOrder) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Duration` param:
	err = encoder.Encode(obj.Duration)
	if err != nil {
		return err
	}
	return nil
}
func (obj *RenewOrder) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Duration`:
	err = decoder.Decode(&obj.Duration)
	if err != nil {
		return err
	}
	return nil
}

// NewRenewOrderInstruction declares a new RenewOrder instruction with the provided parameters and accounts.
func NewRenewOrderInstruction(
	// Parameters:
	duration uint32,
	// Accounts:
	machine ag_solanago.PublicKey,
	order ag_solanago.PublicKey,
	buyer ag_solanago.PublicKey,
	buyerAta ag_solanago.PublicKey,
	vault ag_solanago.PublicKey,
	mint ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey,
	associatedTokenProgram ag_solanago.PublicKey) *RenewOrder {
	return NewRenewOrderInstructionBuilder().
		SetDuration(duration).
		SetMachineAccount(machine).
		SetOrderAccount(order).
		SetBuyerAccount(buyer).
		SetBuyerAtaAccount(buyerAta).
		SetVaultAccount(vault).
		SetMintAccount(mint).
		SetTokenProgramAccount(tokenProgram).
		SetAssociatedTokenProgramAccount(associatedTokenProgram)
}
