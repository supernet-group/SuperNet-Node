// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package distri_ai

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// MakeOffer is the `makeOffer` instruction.
type MakeOffer struct {
	Price       *uint64
	MaxDuration *uint32
	Disk        *uint32

	// [0] = [WRITE] machine
	//
	// [1] = [WRITE, SIGNER] owner
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewMakeOfferInstructionBuilder creates a new `MakeOffer` instruction builder.
func NewMakeOfferInstructionBuilder() *MakeOffer {
	nd := &MakeOffer{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 2),
	}
	return nd
}

// SetPrice sets the "price" parameter.
func (inst *MakeOffer) SetPrice(price uint64) *MakeOffer {
	inst.Price = &price
	return inst
}

// SetMaxDuration sets the "maxDuration" parameter.
func (inst *MakeOffer) SetMaxDuration(maxDuration uint32) *MakeOffer {
	inst.MaxDuration = &maxDuration
	return inst
}

// SetDisk sets the "disk" parameter.
func (inst *MakeOffer) SetDisk(disk uint32) *MakeOffer {
	inst.Disk = &disk
	return inst
}

// SetMachineAccount sets the "machine" account.
func (inst *MakeOffer) SetMachineAccount(machine ag_solanago.PublicKey) *MakeOffer {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(machine).WRITE()
	return inst
}

// GetMachineAccount gets the "machine" account.
func (inst *MakeOffer) GetMachineAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetOwnerAccount sets the "owner" account.
func (inst *MakeOffer) SetOwnerAccount(owner ag_solanago.PublicKey) *MakeOffer {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(owner).WRITE().SIGNER()
	return inst
}

// GetOwnerAccount gets the "owner" account.
func (inst *MakeOffer) GetOwnerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

func (inst MakeOffer) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_MakeOffer,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst MakeOffer) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *MakeOffer) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Price == nil {
			return errors.New("Price parameter is not set")
		}
		if inst.MaxDuration == nil {
			return errors.New("MaxDuration parameter is not set")
		}
		if inst.Disk == nil {
			return errors.New("Disk parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Machine is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Owner is not set")
		}
	}
	return nil
}

func (inst *MakeOffer) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("MakeOffer")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=3]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("      Price", *inst.Price))
						paramsBranch.Child(ag_format.Param("MaxDuration", *inst.MaxDuration))
						paramsBranch.Child(ag_format.Param("       Disk", *inst.Disk))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=2]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("machine", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("  owner", inst.AccountMetaSlice.Get(1)))
					})
				})
		})
}

func (obj MakeOffer) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Price` param:
	err = encoder.Encode(obj.Price)
	if err != nil {
		return err
	}
	// Serialize `MaxDuration` param:
	err = encoder.Encode(obj.MaxDuration)
	if err != nil {
		return err
	}
	// Serialize `Disk` param:
	err = encoder.Encode(obj.Disk)
	if err != nil {
		return err
	}
	return nil
}
func (obj *MakeOffer) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Price`:
	err = decoder.Decode(&obj.Price)
	if err != nil {
		return err
	}
	// Deserialize `MaxDuration`:
	err = decoder.Decode(&obj.MaxDuration)
	if err != nil {
		return err
	}
	// Deserialize `Disk`:
	err = decoder.Decode(&obj.Disk)
	if err != nil {
		return err
	}
	return nil
}

// NewMakeOfferInstruction declares a new MakeOffer instruction with the provided parameters and accounts.
func NewMakeOfferInstruction(
	// Parameters:
	price uint64,
	maxDuration uint32,
	disk uint32,
	// Accounts:
	machine ag_solanago.PublicKey,
	owner ag_solanago.PublicKey) *MakeOffer {
	return NewMakeOfferInstructionBuilder().
		SetPrice(price).
		SetMaxDuration(maxDuration).
		SetDisk(disk).
		SetMachineAccount(machine).
		SetOwnerAccount(owner)
}
