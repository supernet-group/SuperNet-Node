// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package distri_ai

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// OrderCompleted is the `orderCompleted` instruction.
type OrderCompleted struct {
	Metadata *string
	Score    *uint8

	// [0] = [WRITE] machine
	//
	// [1] = [WRITE] order
	//
	// [2] = [WRITE, SIGNER] seller
	//
	// [3] = [WRITE] sellerAta
	//
	// [4] = [WRITE] vault
	//
	// [5] = [] mint
	//
	// [6] = [] tokenProgram
	//
	// [7] = [] associatedTokenProgram
	//
	// [8] = [] systemProgram
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewOrderCompletedInstructionBuilder creates a new `OrderCompleted` instruction builder.
func NewOrderCompletedInstructionBuilder() *OrderCompleted {
	nd := &OrderCompleted{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 9),
	}
	return nd
}

// SetMetadata sets the "metadata" parameter.
func (inst *OrderCompleted) SetMetadata(metadata string) *OrderCompleted {
	inst.Metadata = &metadata
	return inst
}

// SetScore sets the "score" parameter.
func (inst *OrderCompleted) SetScore(score uint8) *OrderCompleted {
	inst.Score = &score
	return inst
}

// SetMachineAccount sets the "machine" account.
func (inst *OrderCompleted) SetMachineAccount(machine ag_solanago.PublicKey) *OrderCompleted {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(machine).WRITE()
	return inst
}

// GetMachineAccount gets the "machine" account.
func (inst *OrderCompleted) GetMachineAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetOrderAccount sets the "order" account.
func (inst *OrderCompleted) SetOrderAccount(order ag_solanago.PublicKey) *OrderCompleted {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(order).WRITE()
	return inst
}

// GetOrderAccount gets the "order" account.
func (inst *OrderCompleted) GetOrderAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetSellerAccount sets the "seller" account.
func (inst *OrderCompleted) SetSellerAccount(seller ag_solanago.PublicKey) *OrderCompleted {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(seller).WRITE().SIGNER()
	return inst
}

// GetSellerAccount gets the "seller" account.
func (inst *OrderCompleted) GetSellerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetSellerAtaAccount sets the "sellerAta" account.
func (inst *OrderCompleted) SetSellerAtaAccount(sellerAta ag_solanago.PublicKey) *OrderCompleted {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(sellerAta).WRITE()
	return inst
}

// GetSellerAtaAccount gets the "sellerAta" account.
func (inst *OrderCompleted) GetSellerAtaAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetVaultAccount sets the "vault" account.
func (inst *OrderCompleted) SetVaultAccount(vault ag_solanago.PublicKey) *OrderCompleted {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(vault).WRITE()
	return inst
}

// GetVaultAccount gets the "vault" account.
func (inst *OrderCompleted) GetVaultAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetMintAccount sets the "mint" account.
func (inst *OrderCompleted) SetMintAccount(mint ag_solanago.PublicKey) *OrderCompleted {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(mint)
	return inst
}

// GetMintAccount gets the "mint" account.
func (inst *OrderCompleted) GetMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetTokenProgramAccount sets the "tokenProgram" account.
func (inst *OrderCompleted) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *OrderCompleted {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "tokenProgram" account.
func (inst *OrderCompleted) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetAssociatedTokenProgramAccount sets the "associatedTokenProgram" account.
func (inst *OrderCompleted) SetAssociatedTokenProgramAccount(associatedTokenProgram ag_solanago.PublicKey) *OrderCompleted {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(associatedTokenProgram)
	return inst
}

// GetAssociatedTokenProgramAccount gets the "associatedTokenProgram" account.
func (inst *OrderCompleted) GetAssociatedTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetSystemProgramAccount sets the "systemProgram" account.
func (inst *OrderCompleted) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *OrderCompleted {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
func (inst *OrderCompleted) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

func (inst OrderCompleted) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_OrderCompleted,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst OrderCompleted) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *OrderCompleted) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Metadata == nil {
			return errors.New("Metadata parameter is not set")
		}
		if inst.Score == nil {
			return errors.New("Score parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Machine is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Order is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.Seller is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.SellerAta is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.Vault is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.Mint is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.AssociatedTokenProgram is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
	}
	return nil
}

func (inst *OrderCompleted) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("OrderCompleted")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=2]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("Metadata", *inst.Metadata))
						paramsBranch.Child(ag_format.Param("   Score", *inst.Score))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=9]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("               machine", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("                 order", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("                seller", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("             sellerAta", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("                 vault", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("                  mint", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("          tokenProgram", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("associatedTokenProgram", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("         systemProgram", inst.AccountMetaSlice.Get(8)))
					})
				})
		})
}

func (obj OrderCompleted) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Metadata` param:
	err = encoder.Encode(obj.Metadata)
	if err != nil {
		return err
	}
	// Serialize `Score` param:
	err = encoder.Encode(obj.Score)
	if err != nil {
		return err
	}
	return nil
}
func (obj *OrderCompleted) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Metadata`:
	err = decoder.Decode(&obj.Metadata)
	if err != nil {
		return err
	}
	// Deserialize `Score`:
	err = decoder.Decode(&obj.Score)
	if err != nil {
		return err
	}
	return nil
}

// NewOrderCompletedInstruction declares a new OrderCompleted instruction with the provided parameters and accounts.
func NewOrderCompletedInstruction(
	// Parameters:
	metadata string,
	score uint8,
	// Accounts:
	machine ag_solanago.PublicKey,
	order ag_solanago.PublicKey,
	seller ag_solanago.PublicKey,
	sellerAta ag_solanago.PublicKey,
	vault ag_solanago.PublicKey,
	mint ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey,
	associatedTokenProgram ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey) *OrderCompleted {
	return NewOrderCompletedInstructionBuilder().
		SetMetadata(metadata).
		SetScore(score).
		SetMachineAccount(machine).
		SetOrderAccount(order).
		SetSellerAccount(seller).
		SetSellerAtaAccount(sellerAta).
		SetVaultAccount(vault).
		SetMintAccount(mint).
		SetTokenProgramAccount(tokenProgram).
		SetAssociatedTokenProgramAccount(associatedTokenProgram).
		SetSystemProgramAccount(systemProgram)
}
